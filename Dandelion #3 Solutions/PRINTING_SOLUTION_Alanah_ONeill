; =====================================
;    yasp - Dandelion #3 - TEST TIME
; 
; IF YASP RUNS SLOW SAVE ANY WORK YOU HAVE
; TO A LOCAL TEXT FILE (copy & paste) AND
; RE-OPEN A NEW YASP SESSION.
;
; Future training material will NOT have the
; above warning. It is now assumed knowledge 
; on handling the sometimes-clunky YASP.
;
; Welcome to the third lesson, and for the
; first time you'll be writing your own 
; assembly code!
;
; Here you'll use the concepts you've
; learned to 
; =====================================
;       RECAP/ANSWERS TO LESSON #2
;
; The 'string' variable, covered at the bottom of the code in
; lesson 2, was stored in Read-only-memory. On the ROM tab, each
; 2-digit value was the hexadecimal representation of a given
; character (letter) or the start/ending bytes that indicate 
; information about the string, such as its format and length.
;
; Adding a number to the word register (that points to the string)
; is the equivalent of moving 'forward' X bytes of data, so when
; a character/number is changed in the word register it will alter
; a part of the string X characters past the 'start'. 
; =====================================
; 		INSTRUCTIONS
;
; Write a program that prints "Assembly", "Assembling" and "Assembled"
; to the debug console, each on a new line. 
; You MUST use only a single STRING variable.
;
; For ##BONUS## points, use the 'jmp' (jump) command to loop the program
; so that it prints these 3 lines over and over in order.
;
; For ##BONUSBONUSBONUS## points, use the 'cmp' (compare) command to
; have the program loop exactly 3 times, then exit. reading test11.mas in the
; sample YASP programs (available from their documentation on the main site)
; might help!
;
; When you've written your answer (either below this text, or in a new file),
; copy it to a text file and save it in the 'Dandelion #3 Solutions' folder
; with the following title:
;
; PRINTING_SOLUTION_Alanah O'Neill

	LA	w8, Robot
	ADD	w8, 7		

	LA	w9, Robot
	ADD	w9, 8	

	LA	w10, Robot
	ADD	w10, 9	

JumpToStart:
main:
	MOV	b0, 0x79
	WRROM	w8, b0
	MOV	b7, 0x20
	WRROM	w9, b7 
	PRINT	Robot

	MOV	b5, 0x69
	WRROM	w8, b5 
	MOV	b1, 0x6E
	WRROM	w9, b1 
	MOV	b2, 0x67
	WRROM	w10, b2 
	PRINT	Robot

	MOV	b3, 0x65
	WRROM	w8, b3 
	MOV	b4, 0x64
	WRROM	w9, b4
	MOV	b6, 0x20
	WRROM	w10, b6
	PRINT	Robot

	JMP JumpToStart

Robot:
	String "assembl" 

