; =====================================
;        yasp - Dandelion #1
; 
; IF YASP RUNS SLOW SAVE ANY WORK YOU HAVE
; TO A LOCAL TEXT FILE (copy & paste) AND
; RE-OPEN A NEW YASP SESSION.
;
; Welcome to the first Intro to Assembly
; Code examples!
;
; Here we'll simply look at writing a 
; number into memory.
; =====================================
; 
; Note that text after a ';' is considered
; commented text, and therefore not run as code.
; YASP shows this text as green, such as right now.
;
; By clicking on the row numbers to the left of any
; line of code you can add a red dot representing
; a 'breakpoint'. This means that during running the
; code you can force it to stop at these points so
; that you can more easily read what is happening
; behind the scenes!

main:			; This text identifies where the main code begins
	DELAY 10	; I have simply added in a command for the system to pause for a small time so that you can put a breakpoint here easily
	MOV	b0, 0x31; This adds the Hexadecimal value "0x31", the ASCII value for "1", to register b0
;	MOV	b4, 0x35
;	MOV	b5, 0x3A
	DELAY 10	
END			; Ends the program.

; =====================================
;	FOR THE READER (That's you!)
;		TO DO:
;
; 1. Add a breakpoint to row 27 [DELAY 10]
; 2. Run the program using the button at the top, and use the "Step" command to run one line at a time until END.
;   You can tell what line has just been run by the grey highlighted row. Keep an eye on the "Register" tab, which
;   shows you what is currently stored in the registers (memory) and some other data. Focus on the b(*) and w(*) columns.
; 3. Press the red cross at the top-right corner to close after you've reached the "END" of the program.
; 
;
;	ANSWER THE FOLLOWING:
;	
; 1. Ignoring the ROM tab, what data shows up on the tabs on the right?
; 2. Consider the Registers tab. Which registers change? Why? What does this represent?
; 3. Change what value is moved into register b0. Try 0x32, for example. Notice any register besides b0 changing?
; 4. Un-comment the second MOV command. Run the program again and step through it. Keep an eye on the registers tab.
; 5. Now un-comment the third MOV command at row 30. Repeat. Is there something unusual this time?
;
;
;	CONSIDER THIS/HINTS:
; 1. Each line on the registers tab represents another step or change (another line of code has executed).
; 2. Red text represents a value that just changed.
; 3. On the registers tab, you can press on the blue text next to 'FORMAT' in the top-right to change between 
;	showing the contained data in binary, Hex, or decimal. I recommend sticking with Hex most of the time, but checking Binary as well.
; 3. Registers represent very small amounts of memory, like a cache, and can store, modify and use small values. 
; 4. There are 32 single-byte registers in YASP (b0 to b31). Each can contain one byte of data, or 8 binary digits (bits). 
; 5. There are also 32 word registers in YASP (w0 to w31). Each can contain 2 bytes of data, or 16 binary digits (bits).
; 6. There is a special relationship between the byte registers and the first 16 word registers, which I'll answer in the next lesson.
